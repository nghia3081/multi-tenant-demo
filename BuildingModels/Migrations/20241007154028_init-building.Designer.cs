// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuildingModels.Migrations
{
    [DbContext(typeof(BuildingContext))]
    [Migration("20241007154028_init-building")]
    partial class initbuilding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BuildingModels.Models.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Apartment_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("Building_Id");

                    b.Property<string>("DepartmentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("ApartmentId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Apartment", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Assigment", b =>
                {
                    b.Property<int>("AssigmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Assigment_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssigmentId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("ServiceFee")
                        .HasColumnType("float");

                    b.Property<double?>("ServicePrice")
                        .HasColumnType("float");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("Staff_Id");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("Task_Id");

                    b.HasKey("AssigmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Assigment", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Building_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("BuildingName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Building_Name");

                    b.Property<string>("CodePosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Code_Position");

                    b.Property<int?>("NumberApartment")
                        .HasColumnType("int")
                        .HasColumnName("Number_Apartment");

                    b.Property<int?>("NumberFloor")
                        .HasColumnType("int")
                        .HasColumnName("Number_Floor");

                    b.HasKey("BuildingId");

                    b.HasIndex("CodePosition");

                    b.ToTable("Building", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Contributor", b =>
                {
                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("Staff_Id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ThirdPartyId")
                        .HasColumnType("int")
                        .HasColumnName("ThirdParty_Id");

                    b.ToTable("Contributor", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Finance", b =>
                {
                    b.Property<int>("FinanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Finance_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinanceId"));

                    b.Property<string>("FinanceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("IncidentalChanges")
                        .HasColumnType("float");

                    b.Property<double?>("Maintain")
                        .HasColumnType("float");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("providerName");

                    b.Property<double?>("ServiceFee")
                        .HasColumnType("float")
                        .HasColumnName("serviceFee");

                    b.HasKey("FinanceId");

                    b.ToTable("Finance", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.FinanceBuilding", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("Building_Id");

                    b.Property<int>("FinanceId")
                        .HasColumnType("int")
                        .HasColumnName("Finance_Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FinanceId");

                    b.ToTable("Finance_Building", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.HandleRequest", b =>
                {
                    b.Property<int?>("AssigmentId")
                        .HasColumnType("int")
                        .HasColumnName("Assigment_Id");

                    b.Property<int>("RequestionId")
                        .HasColumnType("int")
                        .HasColumnName("Requestion_Id");

                    b.HasIndex("AssigmentId");

                    b.HasIndex("RequestionId");

                    b.ToTable("HandleRequest", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("Apartment_ID");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Due_Date");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Issue_Date");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("Status_Id");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Transaction_Date");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("StatusId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Living", b =>
                {
                    b.Property<int>("LivingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Living_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LivingId"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("Apartment_Id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("End_Date");

                    b.Property<int?>("ResidentId")
                        .HasColumnType("int")
                        .HasColumnName("Resident_Id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.HasKey("LivingId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ResidentId");

                    b.ToTable("Living", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Notify", b =>
                {
                    b.Property<int?>("AssigmentId")
                        .HasColumnType("int")
                        .HasColumnName("Assigment_Id");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("NewCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NewCategory_Id");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.HasIndex("AssigmentId");

                    b.HasIndex("NewCategoryId");

                    b.ToTable("Notify", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.NotifyCategory", b =>
                {
                    b.Property<int>("NewCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NewCategory_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewCategoryId"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NewCategoryId");

                    b.ToTable("NotifyCategory", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.OwnerShip", b =>
                {
                    b.Property<int>("OwnerShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OwnerShip_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerShipId"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("Apartment_Id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("End_Date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.HasKey("OwnerShipId")
                        .HasName("PK_OwnerShip_1");

                    b.HasIndex("ApartmentId");

                    b.ToTable("OwnerShip", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Postion", b =>
                {
                    b.Property<string>("CodePosition")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Code_Position");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.HasKey("CodePosition");

                    b.ToTable("Postion", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.RequestComplain", b =>
                {
                    b.Property<int>("RequestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Requestion_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestionId"));

                    b.Property<DateTime?>("DateRequest")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Request");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResidentId")
                        .HasColumnType("int")
                        .HasColumnName("Resident_Id");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestionId");

                    b.HasIndex("ResidentId");

                    b.ToTable("RequestComplain", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Resident", b =>
                {
                    b.Property<int>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Resident_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResidentId"));

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Fullname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("OwnerShipId")
                        .HasColumnType("int")
                        .HasColumnName("OwnerShip_Id");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Phone_Number");

                    b.Property<DateTime?>("RegistratorDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ResidentId");

                    b.HasIndex("OwnerShipId");

                    b.ToTable("Resident", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RollName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Salary", b =>
                {
                    b.Property<double?>("AmoutSalary")
                        .HasColumnType("float");

                    b.Property<int?>("RollId")
                        .HasColumnType("int")
                        .HasColumnName("Roll_Id");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("Staff_Id");

                    b.ToTable("Salary", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("Service_Id");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Service_Name");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Service_Type");

                    b.HasKey("ServiceId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.ServiceContract", b =>
                {
                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("Apartment_Id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("End_Date");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("Service_Id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceContract", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Staff_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Phone_Number");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("BuildingModels.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Status_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Status_Name");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Task_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Task_Name");

                    b.Property<string>("TaskType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TaskId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.ThirdParty", b =>
                {
                    b.Property<int>("ThirdPartyId")
                        .HasColumnType("int")
                        .HasColumnName("ThirdParty_Id");

                    b.Property<string>("Contact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ThirdPartyId");

                    b.ToTable("ThirdParty", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.ThirdPartyContact", b =>
                {
                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("Building_Id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("End_Date");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("Staff_Id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.ToTable("ThirdPartyContact", (string)null);
                });

            modelBuilder.Entity("BuildingModels.Models.Apartment", b =>
                {
                    b.HasOne("BuildingModels.Models.Building", "Building")
                        .WithMany("Apartments")
                        .HasForeignKey("BuildingId")
                        .IsRequired()
                        .HasConstraintName("FK_Apartment_Building");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("BuildingModels.Models.Assigment", b =>
                {
                    b.HasOne("BuildingModels.Models.Task", "Task")
                        .WithMany("Assigments")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_Assigment_Task");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("BuildingModels.Models.Building", b =>
                {
                    b.HasOne("BuildingModels.Models.Postion", "CodePositionNavigation")
                        .WithMany("Buildings")
                        .HasForeignKey("CodePosition")
                        .IsRequired()
                        .HasConstraintName("FK_Building_Postion");

                    b.Navigation("CodePositionNavigation");
                });

            modelBuilder.Entity("BuildingModels.Models.FinanceBuilding", b =>
                {
                    b.HasOne("BuildingModels.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .IsRequired()
                        .HasConstraintName("FK_Finance_Building_Building");

                    b.HasOne("BuildingModels.Models.Finance", "Finance")
                        .WithMany()
                        .HasForeignKey("FinanceId")
                        .IsRequired()
                        .HasConstraintName("FK_Finance_Building_Finance");

                    b.Navigation("Building");

                    b.Navigation("Finance");
                });

            modelBuilder.Entity("BuildingModels.Models.HandleRequest", b =>
                {
                    b.HasOne("BuildingModels.Models.Assigment", "Assigment")
                        .WithMany()
                        .HasForeignKey("AssigmentId")
                        .HasConstraintName("FK_HandleRequest_Assigment");

                    b.HasOne("BuildingModels.Models.RequestComplain", "Requestion")
                        .WithMany()
                        .HasForeignKey("RequestionId")
                        .IsRequired()
                        .HasConstraintName("FK_HandleRequest_RequestComplain");

                    b.Navigation("Assigment");

                    b.Navigation("Requestion");
                });

            modelBuilder.Entity("BuildingModels.Models.Invoice", b =>
                {
                    b.HasOne("BuildingModels.Models.Apartment", "Apartment")
                        .WithMany("Invoices")
                        .HasForeignKey("ApartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Apartment");

                    b.HasOne("BuildingModels.Models.Status", "Status")
                        .WithMany("Invoices")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Status");

                    b.Navigation("Apartment");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BuildingModels.Models.Living", b =>
                {
                    b.HasOne("BuildingModels.Models.Apartment", "Apartment")
                        .WithMany("Livings")
                        .HasForeignKey("ApartmentId")
                        .HasConstraintName("FK_Living_Apartment");

                    b.HasOne("BuildingModels.Models.Resident", "Resident")
                        .WithMany("Livings")
                        .HasForeignKey("ResidentId")
                        .HasConstraintName("FK_Living_Resident");

                    b.Navigation("Apartment");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("BuildingModels.Models.Notify", b =>
                {
                    b.HasOne("BuildingModels.Models.Assigment", "Assigment")
                        .WithMany()
                        .HasForeignKey("AssigmentId")
                        .HasConstraintName("FK_Notify_Assigment");

                    b.HasOne("BuildingModels.Models.NotifyCategory", "NewCategory")
                        .WithMany()
                        .HasForeignKey("NewCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Notify_NotifyCategory");

                    b.Navigation("Assigment");

                    b.Navigation("NewCategory");
                });

            modelBuilder.Entity("BuildingModels.Models.OwnerShip", b =>
                {
                    b.HasOne("BuildingModels.Models.Apartment", "Apartment")
                        .WithMany("OwnerShips")
                        .HasForeignKey("ApartmentId")
                        .HasConstraintName("FK_OwnerShip_Apartment");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("BuildingModels.Models.RequestComplain", b =>
                {
                    b.HasOne("BuildingModels.Models.Resident", "Resident")
                        .WithMany("RequestComplains")
                        .HasForeignKey("ResidentId")
                        .HasConstraintName("FK_RequestComplain_Resident");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("BuildingModels.Models.Resident", b =>
                {
                    b.HasOne("BuildingModels.Models.OwnerShip", "OwnerShip")
                        .WithMany("Residents")
                        .HasForeignKey("OwnerShipId")
                        .HasConstraintName("FK_Resident_OwnerShip");

                    b.Navigation("OwnerShip");
                });

            modelBuilder.Entity("BuildingModels.Models.ServiceContract", b =>
                {
                    b.HasOne("BuildingModels.Models.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceContract_Apartment");

                    b.HasOne("BuildingModels.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceContract_Service");

                    b.Navigation("Apartment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BuildingModels.Models.Apartment", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Livings");

                    b.Navigation("OwnerShips");
                });

            modelBuilder.Entity("BuildingModels.Models.Building", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("BuildingModels.Models.OwnerShip", b =>
                {
                    b.Navigation("Residents");
                });

            modelBuilder.Entity("BuildingModels.Models.Postion", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("BuildingModels.Models.Resident", b =>
                {
                    b.Navigation("Livings");

                    b.Navigation("RequestComplains");
                });

            modelBuilder.Entity("BuildingModels.Models.Status", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("BuildingModels.Models.Task", b =>
                {
                    b.Navigation("Assigments");
                });
#pragma warning restore 612, 618
        }
    }
}
